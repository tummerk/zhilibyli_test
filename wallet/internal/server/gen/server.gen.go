// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package gen

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get wallet balance
	// (GET /wallet)
	GetWallet(ctx echo.Context, params GetWalletParams) error
	// Create a new wallet
	// (POST /wallet)
	PostWallet(ctx echo.Context) error
	// Deposit money into wallet
	// (POST /wallet/deposit)
	PostWalletDeposit(ctx echo.Context, params PostWalletDepositParams) error
	// Get transaction history for a wallet
	// (GET /wallet/transactions)
	GetWalletTransactions(ctx echo.Context, params GetWalletTransactionsParams) error
	// Withdraw money from wallet
	// (POST /wallet/withdraw)
	PostWalletWithdraw(ctx echo.Context, params PostWalletWithdrawParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetWallet converts echo context to params.
func (w *ServerInterfaceWrapper) GetWallet(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWalletParams
	// ------------- Required query parameter "wallet_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "wallet_id", ctx.QueryParams(), &params.WalletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter wallet_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWallet(ctx, params)
	return err
}

// PostWallet converts echo context to params.
func (w *ServerInterfaceWrapper) PostWallet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWallet(ctx)
	return err
}

// PostWalletDeposit converts echo context to params.
func (w *ServerInterfaceWrapper) PostWalletDeposit(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostWalletDepositParams
	// ------------- Required query parameter "wallet_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "wallet_id", ctx.QueryParams(), &params.WalletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter wallet_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWalletDeposit(ctx, params)
	return err
}

// GetWalletTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetWalletTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWalletTransactionsParams
	// ------------- Required query parameter "wallet_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "wallet_id", ctx.QueryParams(), &params.WalletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter wallet_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWalletTransactions(ctx, params)
	return err
}

// PostWalletWithdraw converts echo context to params.
func (w *ServerInterfaceWrapper) PostWalletWithdraw(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostWalletWithdrawParams
	// ------------- Required query parameter "wallet_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "wallet_id", ctx.QueryParams(), &params.WalletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter wallet_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWalletWithdraw(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/wallet", wrapper.GetWallet)
	router.POST(baseURL+"/wallet", wrapper.PostWallet)
	router.POST(baseURL+"/wallet/deposit", wrapper.PostWalletDeposit)
	router.GET(baseURL+"/wallet/transactions", wrapper.GetWalletTransactions)
	router.POST(baseURL+"/wallet/withdraw", wrapper.PostWalletWithdraw)

}
